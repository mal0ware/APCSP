1. Yes, the design meets the needs of the user by encrypting an image, inside of another image.
2. One technically student created function is "is_even()", and it simply determines whether or not the inputted value is even, by measuring the input mod 2. If it results in 1, then it is odd, because any even number mod 2 is 0. It selects the returned value depending on if the result is 0 or 1.
3. It contributes to the overall program because we are dealing with binary, and changing the lowest bit to either 0 or 1 based on if the bit value is over a certain predetermined color threshold.
4. pixelValue[] is a list in our program. it is meant to store the RGB values of the pixel, meaning it stores 3 values.
5. This manages the complexion in the program, by not having to create and return several different variables. Each iteration of a for loop can append a value to the list, and the list itself can be returned.
6. It will run 3 times, for the 3 RGB values. There is no way it would break, as the list is pre set to run 3 times. It can be modified to loop infinitely by converting it to a "while true:" loop that never breaks. 
7. Chaging the run_encryption() functino will result in an error, as the rest of the code will never have been called, therefore will never run and encrypt the image. The run_encryption function is sort of the main function of the code, as it is called and necessary for the code to run.